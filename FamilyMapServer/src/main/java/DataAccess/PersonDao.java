package DataAccess;

import Model.Person;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * This class is responsible for handling all database operations involving
 * a Person object.
 */
public class PersonDao {

    private final Connection conn;

    /**
     * Parameterized constructor used to get the connection
     * generated by the Database class.
     * @param conn The connection generated by the Database class.
     */
    public PersonDao(Connection conn){
        this.conn = conn;
    }

    /**
     * Used to insert a new person into the database with all its needed information.
     * @param person A person object that has already been created elsewhere is passed in
     *               and translated into a SQL insert command.
     */
    public void insert (Person person) throws DataAccessException {
        String sql = "INSERT INTO persons (person_id, assoc_username, first_name, last_name, gender, " +
                "father_id, mother_id, spouse_id) VALUES(?,?,?,?,?,?,?,?);";

        try(PreparedStatement stmt = conn.prepareStatement(sql)){
            stmt.clearParameters();
            stmt.setString(1, person.getPersonID());
            stmt.setString(2, person.getAssociatedUsername());
            stmt.setString(3, person.getFirstName());
            stmt.setString(4, person.getLastName());
            stmt.setString(5, person.getGender());
            stmt.setString(6, person.getFatherID());
            stmt.setString(7, person.getMotherID());
            stmt.setString(8, person.getSpouseID());

            stmt.executeUpdate();
        }
        catch(SQLException ex){
            ex.printStackTrace();
            throw new DataAccessException("There was an error while trying to insert.");
        }
    }

    /**
     * Used to find a single person in the database.
     * @param person_id The unique person ID that will be used to find the person we want.
     * @return Find the person in the database and return it as an actual Person object.
     */
    public Person find(String person_id)throws DataAccessException{
        Person person;
        ResultSet rs = null;
        String sql = null;
        sql = "SELECT * FROM persons WHERE person_id = ?;";
        try(PreparedStatement stmt = conn.prepareStatement(sql)){
            stmt.setString(1, person_id);
            rs = stmt.executeQuery();
            if(rs.next()){
                person = new Person(rs.getString("person_id"), rs.getString("assoc_username"),
                        rs.getString("first_name"), rs.getString("last_name"),
                        rs.getString("gender"), rs.getString("father_id"),
                        rs.getString("mother_id"), rs.getString("spouse_id"));
                return person;
            }
        }
        catch(SQLException e){
            e.printStackTrace();
            throw new DataAccessException("There was an error trying to find the given person.");
        }
        finally {
            if(rs != null){
                try{
                    rs.close();
                }
                catch(SQLException e){
                    e.printStackTrace();
                    throw new DataAccessException("There was an error trying to close the result set");
                }
            }
        }
        return null;
    }

    /**
     * Used to completely clear the Person table
     */
    public void clear()throws DataAccessException{
        String sql = "DELETE FROM persons";
        try(PreparedStatement stmt = conn.prepareStatement(sql)){
            stmt.executeUpdate();
        }
        catch(SQLException e){
            e.printStackTrace();
            throw new DataAccessException("Error encountered while clearing the person table.");
        }

    }

    //Used to delete all events in the database corresponding to the passed in username.
    public void deleteList(String username) throws DataAccessException {
        String sql = "DELETE FROM persons WHERE assoc_username = ?";
        try(PreparedStatement stmt = conn.prepareStatement(sql)){
            stmt.setString(1, username);
            stmt.executeUpdate();
        }
        catch(SQLException e){
            e.printStackTrace();
            throw new DataAccessException("Error encountered while deleting list of persons.");
        }
    }

    //Used to get a List of all people from the database associated with the passed in username.
    public List<Person> getList(String username) throws DataAccessException{
        ResultSet rs = null;
        ArrayList<Person> people = new ArrayList<>();
        String sql = "SELECT * FROM persons WHERE assoc_username = ?;";
        try(PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            rs = stmt.executeQuery();
            while(rs.next()){
                Person person = new Person(rs.getString("person_id"), rs.getString("assoc_username"),
                        rs.getString("first_name"), rs.getString("last_name"),
                        rs.getString("gender"), rs.getString("father_id"),
                        rs.getString("mother_id"), rs.getString("spouse_id"));
                people.add(person);
            }
            return people;
        }
        catch(SQLException e){
            e.printStackTrace();
            throw new DataAccessException("Error while getting list of all people from database.");
        }
        finally { //Finally block used to make sure the result set is closed with no errors.
            if(rs != null){
                try{
                    rs.close();
                }
                catch(SQLException e){
                    e.printStackTrace();
                    throw new DataAccessException("There was an error trying to close the result set");
                }
            }
        }
    }
}
