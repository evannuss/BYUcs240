package DataAccess;

import Model.AuthToken;

import java.sql.*;

/**
 * This class is responsible for handling all database operations involving
 * an authorization token.
 */
public class AuthTokenDao {

    private final Connection conn;

    /**
     * Parameterized constructor to get the connection generated by the Database class.
     * @param conn The passed in connection to be used for manipulating the database.
     */
    public AuthTokenDao(Connection conn){
        this.conn = conn;
    }

    /**
     * Inserts a new authorization token into the database.
     * @param token An already created AuthToken object with all the info
     *              needing to be stored in the database.
     */
    public void insert (AuthToken token) throws DataAccessException {
        String sql = "INSERT INTO auth_tokens (token, user_id) VALUES(?,?);";

        try(PreparedStatement stmt = conn.prepareStatement(sql)){
            stmt.clearParameters();
            stmt.setString(1, token.getToken());
            stmt.setString(2, token.getUser_id());

            stmt.executeUpdate();
        }
        catch(SQLException ex){
            throw new DataAccessException("There was an error while trying to insert a new auth token.");
        }
    }

    /**
     * Used to find a single authorization token from the database.
     * @return The found token is returned as an actual AuthToken object.
     */
    public AuthToken find(String token) throws DataAccessException{
        AuthToken authToken;
        ResultSet rs = null;
        String sql = "SELECT * FROM auth_tokens WHERE token = ?;";
        try(PreparedStatement stmt = conn.prepareStatement(sql)){
            stmt.setString(1, token);
            rs = stmt.executeQuery();
            if(rs.next()){
                authToken = new AuthToken(rs.getString("token"), rs.getString("user_id"));
                return authToken;
            }
        }
        catch(SQLException e){
            e.printStackTrace();
            throw new DataAccessException("There was an error trying to find the given user.");
        }
        finally { //finally block for ensuring the result set gets closed with no problems.
            if(rs != null){
                try{
                    rs.close();
                }
                catch(SQLException e){
                    e.printStackTrace();
                    throw new DataAccessException("There was an error trying to close the result set");
                }
            }
        }
        return null;
    }

    /**
     * Used to delete a single authorization token from the database.
     * @param token The token that needs to be deleted.
     */
    //Commented out because it is not used in this part of the project. But I'm pretty sure it will be needed when
    //integrated with the client.
//    public void delete (AuthToken token) throws DataAccessException{
//        String sql = "DELETE FROM auth_tokens WHERE token = ?";
//        try(PreparedStatement stmt = conn.prepareStatement(sql)){
//            stmt.setString(1, token.getToken());
//            stmt.executeUpdate();
//        }
//        catch(SQLException e){
//            e.printStackTrace();
//            throw new DataAccessException("Error encountered while clearing the auth_tokens table.");
//        }
//    }

    /**
     * Used to completely clear the AuthToken table
     */
    public void clear()throws DataAccessException{
        String sql = "DELETE FROM auth_tokens";
        try(PreparedStatement stmt = conn.prepareStatement(sql)){
            stmt.executeUpdate();
        }
        catch(SQLException e){
            e.printStackTrace();
            throw new DataAccessException("Error encountered while clearing the auth_tokens table.");
        }
    }
}
